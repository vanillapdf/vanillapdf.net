name: Publish NuGet packages

on:
  push:
    tags:
      - 'v*.*.*'  # e.g., v2.0.0

permissions:
  contents: read
  packages: write  # Required for pushing to GitHub Packages

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      build_suffix: ${{ steps.parse.outputs.build_suffix }}

    steps:
      - name: Derive build suffix from tag
        id: parse
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG#v}"
          EXTRA=""
          
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(.*)$ ]]; then
            EXTRA="${BASH_REMATCH[1]}"
          fi
          
          if [[ -n "$EXTRA" ]]; then
            EXTRA="${EXTRA#-}"
            echo "build_suffix=$EXTRA" >> "$GITHUB_OUTPUT"
          else
            echo "build_suffix=" >> "$GITHUB_OUTPUT"
          fi

  build-nuget:
    needs: prepare
    uses: ./.github/workflows/build-nuget.yml
    with:
      build_suffix: ${{ needs.prepare.outputs.build_suffix }}

  publish-nuget-github:
    runs-on: ubuntu-latest
    environment:
      name: staging

    needs: build-nuget
    steps:
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          path: ./nupkgs

      - name: Push to GitHub Packages
        run: |
          dotnet nuget push nupkgs/**/*.nupkg \
            --source "${{ vars.NUGET_SOURCE }}" \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --skip-duplicate

  publish-nuget-official:
    runs-on: ubuntu-latest
    environment:
      name: production

    needs: publish-nuget-github
    steps:
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          path: ./nupkgs

      - name: Push to NuGet.org
        run: |
          dotnet nuget push nupkgs/**/*.nupkg \
            --source "${{ vars.NUGET_SOURCE }}" \
            --api-key "${{ secrets.NUGET_API_KEY }}" \
            --skip-duplicate
